# # Starter pipeline
# # Start with a minimal pipeline that you can customize to build and deploy your code.
# # Add steps that build, run tests, deploy, and more:
# # https://aka.ms/yaml

# trigger:
# - none

# pool:
#   vmImage: ubuntu-latest


# stages:
# - stage: Terraform_Build
#   displayName: 'Build Resource Group with Terraform'
#   jobs: 
#   - job: Build
#     displayName: Build Resource Group
#     timeoutInMinutes: 30 # job times out in 30 minutes
#     steps: 
#       - task: TerraformInstaller@1
#         displayName: terrafrom Install
#         inputs:
#           terraformVersion: 'latest'
#       - task: TerraformTaskV2@2
#         displayName: terraform init
#         inputs:
#           provider: 'azurerm'
#           command: 'init'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#           backendServiceArm: 'aks provisioning-Infra'
#           backendAzureRmResourceGroupName: 'Test-RG'
#           backendAzureRmStorageAccountName: 'teststorageaccount'
#           backendAzureRmContainerName: 'terraform'
#           backendAzureRmKey: 'tf/terraform.tfstate'

#       - task: TerraformTaskV4@4
#         displayName: Run terraform Validate
#         inputs:
#           provider: 'azurerm'
#           command: 'validate'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'

#       - task: TerraformTaskV4@4
#         displayName: run terraform Plan
#         inputs:
#           provider: 'azurerm'
#           command: 'plan'
#           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#           environmentServiceNameAzureRM: 'aks provisioning-Infra'

# # Review step
# - stage: review_by_user
#   displayName: Review stage
#   jobs: 
#   - job: waitForValidation
#     displayName: Wait for external validation
#     pool: server
#     timeoutInMinutes: 1440 # job times out in a day
#     steps:   
#     - task: ManualValidation@0
#       timeoutInMinutes: 1440 # task times out in 1 day
#       inputs:
#         notifyUsers: 'user@gmail.com'
#         instructions: 'Please validate the build configuration and resume'
          
# # Equivalent to terraform apply main.tfplan
# - stage: apply
#   displayName: Apply stage
#   jobs: 
#   - job: apply_job
#     displayName: Terraform apply
#     timeoutInMinutes: 30 # job times out in 30 minutes
#     steps:     
#     - task: TerraformTaskV2@2
#       displayName: terraform init
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         backendServiceArm: 'aks provisioning-Infra'
#         backendAzureRmResourceGroupName: 'Test-RG'
#         backendAzureRmStorageAccountName: 'teststorageaccount'
#         backendAzureRmContainerName: 'terraform'
#         backendAzureRmKey: 'tf/terraform.tfstate'
        
#     - task: TerraformTaskV2@2
#       displayName: terraform apply 
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
#         environmentServiceNameAzureRM: 'aks provisioning-Infra' 







# CI 

          
# trigger:
#   - main

# pool:
#   vmImage: 'ubuntu-latest'

# # Define Variables
# variables:
# - name: DEV_ENVIRONMENT
#   value: dev 

# stages:
#   - stage: terraformValidate
#     jobs:
#       - job: terraformValidate
#         displayName: TerraformValidate
#         continueOnError: true
#         steps:
#          - task: PublishPipelineArtifact@1
#            inputs:
#              targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#              artifact: 'published-artifacts'
#              publishLocation: 'pipeline'
        
#          - task: TerraformInstaller@0
#            inputs:
#              terraformVersion: 'latest'
#          - task: TerraformCLI@0
#            inputs:
#              command: 'init'
#              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#              backendType: 'azurerm'
#              backendServiceArm: 'terraform-aks-azurerm-svc-con'
#              backendAzureRmResourceGroupName: 'aks-rg-sa'
#              backendAzureRmStorageAccountName: 'terraformstatefileaccoun'
#              backendAzureRmContainerName: 'tfstate'
#              backendAzureRmKey: 'aks-test.tfstate'
#              allowTelemetryCollection: false
#          - task: TerraformCLI@0
#            inputs:
#              command: 'validate'
#              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
#              allowTelemetryCollection: false  




# CD 

# - stage: DeployAKSClusters
#     jobs:
#     - deployment: DeployDevAKSCluster
#       displayName: DeployDevAKSCluster
#       pool:
#         vmImage: 'ubuntu-latest'
#       environment: $(DEV_ENVIRONMENT)      
#       strategy:
#         runOnce:
#           deploy:
#             steps:
#             - task: DownloadSecureFile@1
#               name: sshkey
#               inputs:
#                 secureFile: 'aks-terraform-devops-ssh-key-ububtu.pub'
#             - task: TerraformCLI@0
#               inputs:
#                 command: 'init'
#                 workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
#                 backendType: 'azurerm'
#                 backendServiceArm: 'azuredevops-azureRM-svc'
#                 backendAzureRmResourceGroupName: 'aks-rg-sa'
#                 backendAzureRmStorageAccountName: 'terraformstatefileaccoun'
#                 backendAzureRmContainerName: 'tfstate'
#                 backendAzureRmKey: 'aks-$(DEV_ENVIRONMENT).tfstate'
#                 allowTelemetryCollection: false
#             - task: TerraformCLI@0
#               inputs:
#                 command: 'plan'
#                 workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
#                 environmentServiceName: 'azuredevops-azureRM-svc'
#                 commandOptions: '-var ssh_public_key=$(sshkey.secureFilePath) -out $(Pipeline.Workspace)/published-artifacts/$(DEV_ENVIRONMENT)-$(Build.BuildId).out -var environment=$(DEV_ENVIRONMENT)'
#                 allowTelemetryCollection: false
#             - task: TerraformCLI@0
#               inputs:
#                 command: 'apply'
#                 workingDirectory: '$(Pipeline.Workspace)/published-artifacts'
#                 environmentServiceName: 'azuredevops-azureRM-svc'
#                 commandOptions: '$(Pipeline.Workspace)/published-artifacts/$(DEV_ENVIRONMENT)-$(Build.BuildId).out'
#                 allowTelemetryCollection: false
